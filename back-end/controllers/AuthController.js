// üîê Import th∆∞ vi·ªán m√£ h√≥a m·∫≠t kh·∫©u v√† x√°c th·ª±c JWT
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

// üì¶ Import model thao t√°c v·ªõi b·∫£ng users
const UserModel = require("../models/UserModel");

// üîë Kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ k√Ω JWT (n√™n l∆∞u v√†o bi·∫øn m√¥i tr∆∞·ªùng th·ª±c t·∫ø)
const secretKey = "mySecretKey";

// üíº B·ªô ƒëi·ªÅu khi·ªÉn x√°c th·ª±c ng∆∞·ªùi d√πng (Auth)
const AuthController = {
  // ‚úÖ [POST] /login ‚Äì ƒêƒÉng nh·∫≠p
  login: async (req, res) => {
    // üßæ L·∫•y username v√† password t·ª´ request
    const { username, password } = req.body;

    // üîç T√¨m user theo username
    const user = await UserModel.findByUsername(username);

    // ‚ùå N·∫øu kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
    if (!user) return res.status(404).json({ error: "User not found" });

    // üîê So s√°nh m·∫≠t kh·∫©u nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a trong DB
    const valid = await bcrypt.compare(password, user.password);

    // ‚ùå N·∫øu sai m·∫≠t kh·∫©u
    if (!valid) return res.status(401).json({ error: "Invalid password" });

    // ü™™ T·∫°o JWT token ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng
    const token = jwt.sign(
      {
        username: user.username,
        role: user.role,
        name: user.name, // t√™n ƒë·∫ßy ƒë·ªß ng∆∞·ªùi d√πng (v√≠ d·ª•: sinh vi√™n ho·∫∑c admin)
      },
      secretKey,
      { expiresIn: "1h" } // Token c√≥ hi·ªáu l·ª±c 1 gi·ªù
    );

    // ‚úÖ Tr·∫£ token v√† th√¥ng tin ng∆∞·ªùi d√πng cho frontend ƒë·ªÉ l∆∞u
    res.json({
      token, // d√πng ƒë·ªÉ g·ª≠i trong Authorization header cho c√°c API sau
      role: user.role,
      name: user.name,
      id: user.id, // Tr·∫£ th√™m ID ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c ch·ª©c nƒÉng ƒëƒÉng k√Ω kh√≥a h·ªçc
    });
  },

  // ‚úÖ [POST] /register ‚Äì T·∫°o t√†i kho·∫£n m·ªõi
  register: async (req, res) => {
    const { username, password, name, role } = req.body;

    // üîê M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o DB
    const hash = await bcrypt.hash(password, 10); // 10 l√† salt rounds

    try {
      // üß± G·ªçi h√†m t·∫°o t√†i kho·∫£n trong model
      await UserModel.createUser(username, hash, name, role);

      // ‚úÖ Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
      res.json({ message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng!" });
    } catch (err) {
      // ‚ùå N·∫øu l·ªói (v√≠ d·ª•: username tr√πng), tr·∫£ v·ªÅ l·ªói 500
      console.error("Register error:", err);
      res.status(500).json({ error: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói server" });
    }
  },
};

// üì§ Xu·∫•t controller ra ngo√†i ƒë·ªÉ router s·ª≠ d·ª•ng
module.exports = AuthController;
